# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.2
#
# <auto-generated>
#
# Generated from file `server.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module demo
_M_demo = Ice.openModule('demo')
__name__ = 'demo'

_M_demo._t_math = IcePy.defineValue('::demo::math', Ice.Value, -1, (), False, True, None, ())

if 'mathPrx' not in _M_demo.__dict__:
    _M_demo.mathPrx = Ice.createTempClass()
    class mathPrx(Ice.ObjectPrx):

        def add(self, x, y, context=None):
            return _M_demo.math._op_add.invoke(self, ((x, y), context))

        def addAsync(self, x, y, context=None):
            return _M_demo.math._op_add.invokeAsync(self, ((x, y), context))

        def begin_add(self, x, y, _response=None, _ex=None, _sent=None, context=None):
            return _M_demo.math._op_add.begin(self, ((x, y), _response, _ex, _sent, context))

        def end_add(self, _r):
            return _M_demo.math._op_add.end(self, _r)

        def substract(self, x, y, context=None):
            return _M_demo.math._op_substract.invoke(self, ((x, y), context))

        def substractAsync(self, x, y, context=None):
            return _M_demo.math._op_substract.invokeAsync(self, ((x, y), context))

        def begin_substract(self, x, y, _response=None, _ex=None, _sent=None, context=None):
            return _M_demo.math._op_substract.begin(self, ((x, y), _response, _ex, _sent, context))

        def end_substract(self, _r):
            return _M_demo.math._op_substract.end(self, _r)

        def multiply(self, x, y, context=None):
            return _M_demo.math._op_multiply.invoke(self, ((x, y), context))

        def multiplyAsync(self, x, y, context=None):
            return _M_demo.math._op_multiply.invokeAsync(self, ((x, y), context))

        def begin_multiply(self, x, y, _response=None, _ex=None, _sent=None, context=None):
            return _M_demo.math._op_multiply.begin(self, ((x, y), _response, _ex, _sent, context))

        def end_multiply(self, _r):
            return _M_demo.math._op_multiply.end(self, _r)

        def divide(self, x, y, context=None):
            return _M_demo.math._op_divide.invoke(self, ((x, y), context))

        def divideAsync(self, x, y, context=None):
            return _M_demo.math._op_divide.invokeAsync(self, ((x, y), context))

        def begin_divide(self, x, y, _response=None, _ex=None, _sent=None, context=None):
            return _M_demo.math._op_divide.begin(self, ((x, y), _response, _ex, _sent, context))

        def end_divide(self, _r):
            return _M_demo.math._op_divide.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_demo.mathPrx.ice_checkedCast(proxy, '::demo::math', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_demo.mathPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::demo::math'
    _M_demo._t_mathPrx = IcePy.defineProxy('::demo::math', mathPrx)

    _M_demo.mathPrx = mathPrx
    del mathPrx

    _M_demo.math = Ice.createTempClass()
    class math(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::demo::math')

        def ice_id(self, current=None):
            return '::demo::math'

        @staticmethod
        def ice_staticId():
            return '::demo::math'

        def add(self, x, y, current=None):
            raise NotImplementedError("servant method 'add' not implemented")

        def substract(self, x, y, current=None):
            raise NotImplementedError("servant method 'substract' not implemented")

        def multiply(self, x, y, current=None):
            raise NotImplementedError("servant method 'multiply' not implemented")

        def divide(self, x, y, current=None):
            raise NotImplementedError("servant method 'divide' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_demo._t_mathDisp)

        __repr__ = __str__

    _M_demo._t_mathDisp = IcePy.defineClass('::demo::math', math, (), None, ())
    math._ice_type = _M_demo._t_mathDisp

    math._op_add = IcePy.Operation('add', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    math._op_substract = IcePy.Operation('substract', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    math._op_multiply = IcePy.Operation('multiply', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    math._op_divide = IcePy.Operation('divide', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_int, False, 0), ())

    _M_demo.math = math
    del math

# End of module demo
